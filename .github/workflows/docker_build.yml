on:
  workflow_call:
    inputs:
      service:
        required: true
        type: string
      image:
        required: true
        type: string
      context:
        required: true
        type: string

jobs:
  voting-app:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    env:
      IMAGE_NAME: ${{ inputs.image }}
      REGISTRY: docker.io
      REPO: ${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.image }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1

      - name: Login to Docker Registry
        uses: docker/login-action@v3.6.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get the tag name
        id: get_version
        run: |
          echo "SHA7=git-${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "LATEST=true" >> $GITHUB_OUTPUT
          else
            echo "LATEST=false" >> $GITHUB_OUTPUT
          fi

      ##################################################################
      # 1) Build single-arch (amd64) image for scanning
      ##################################################################
      - name: Build amd64 image for scan
        uses: docker/build-push-action@v4
        with:
          context: ${{ inputs.context }}
          platforms: linux/amd64
          tags: ${{ inputs.image }}:scan-${{ github.sha }}
          load: true
          push: false
          no-cache: true
          build-args: |
            INSTALL_DEV_DEPS=true   # only if Dockerfile supports ARG

      ##################################################################
      # 2) Run Trivy scan on the built image
      ##################################################################
      - name: Run Trivy Scanner
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: ${{ env.REPO }}:scan-${{ github.sha }}
          format: table
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      ##################################################################
      # 3) Build and push MULTI-ARCH image (only if scan passes)
      ##################################################################
      - name: Build & push multi-arch image
        if: success()
        uses: docker/build-push-action@v6.18.0
        id: push
        with:
          context: ${{ inputs.context }}
          platforms: linux/amd64,linux/arm64
          push: true
          cache-from: type=registry,ref=${{ env.REPO }}:buildcache
          cache-to: type=registry,ref=${{ env.REPO }}:buildcache,mode=max
          tags: |
            ${{ env.REPO }}:git-${{ steps.get_version.outputs.SHA7 }}
            ${{ env.REPO }}:${{ github.sha }}

      - name: Tag latest on main
        if: ${{ success() && steps.get_version.outputs.LATEST == 'true' }}
        run: |
          docker buildx imagetools create \
            -t ${{ env.REPO }}:latest \
            ${{ env.REPO }}@${{ steps.push.outputs.digest }}

      ##################################################################
      # 4) Sign & verify with Cosign
      ##################################################################
      - name: Install Cosign
        if: success()
        uses: sigstore/cosign-installer@v3.10.0

      - name: Sign with Cosign
        if: success()
        run: |
          cosign sign --yes  ${{ env.REGISTRY }}/${{ env.REPO }}@${{ steps.push.outputs.digest }}

      - name: Verify signature
        if: success()
        run: |
          cosign verify ${{ env.REGISTRY }}/${{ env.REPO }}@${{ steps.push.outputs.digest }} \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            --certificate-identity-regexp "https://github.com/${{ github.repository }}/\.github/workflows/docker_build\.yml@.*" \
            --output text
